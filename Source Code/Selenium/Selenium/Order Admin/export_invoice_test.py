from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import keyboard
from SaveTestcaseLog import log_test_execution



import time
import os

DOWNLOAD_DIR = os.path.join(os.getcwd(), "downloads")
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)

class ExportInvoiceTest:
    def __init__(self):
        # C·∫•u h√¨nh t√πy ch·ªçn Chrome
        chrome_options = Options()
        chrome_options.add_argument("--incognito")
        # T·∫°o service v√† kh·ªüi t·∫°o tr√¨nh duy·ªát
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        # ƒê·ª£i v√† ph√≥ng to c·ª≠a s·ªï
        self.wait = WebDriverWait(self.driver, 10)
        self.driver.maximize_window()


    def login(self, email, password):
        """ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng"""
        try:
            # Truy c·∫≠p trang web
            self.driver.get('http://localhost:5173/')
            
            # Click v√†o li√™n k·∫øt ƒëƒÉng nh·∫≠p
            login_link = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[@href='/login' and contains(text(), 'ƒêƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω')]"))
            )
            login_link.click()
            
            # Nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p
            email_field = self.wait.until(EC.presence_of_element_located((By.NAME, "email")))
            password_field = self.driver.find_element(By.NAME, "password")
            
            email_field.clear()
            email_field.send_keys(email)
            password_field.clear()
            password_field.send_keys(password)
            
            # Click n√∫t ƒëƒÉng nh·∫≠p
            login_button = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'bg-main') and contains(text(), 'ƒêƒÉng nh·∫≠p')]"))
            )
            login_button.click()
            
            self.mark_test_status("PASS", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", level="Exemplary")
            return True
        except Exception as e:
            self.mark_test_status("FAIL", f"L·ªói ƒëƒÉng nh·∫≠p: {e}", level="Below Expectation")
            return False
    
    def navigate_to_admin_orders(self):
        """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω ƒë∆°n h√†ng"""
        try:
            # Click v√†o profile
            profile_element = self.wait.until(EC.element_to_be_clickable((By.ID, "profile")))
            profile_element.click()
            
            # Click v√†o Admin Workplace
            admin_link = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[@href='/admin/overview' and contains(text(), 'Trang qu·∫£n tr·ªã')]"))
            )
            admin_link.click()
            
            # ƒê·ª£i trang admin load
            self.wait.until(EC.url_contains("/admin/overview"))
            
            # Click v√†o ƒê∆°n ƒë·∫∑t h√†ng
            order_link = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[@href='/admin/order' and contains(text(), 'ƒê∆°n ƒë·∫∑t h√†ng')]"))
            )
            order_link.click()
            
            # ƒê·ª£i trang ƒë∆°n h√†ng load
            self.wait.until(EC.url_contains("/admin/order"))
            self.mark_test_status("PASS", "ƒêi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang ƒë∆°n h√†ng admin", level="Sufficient")
            
            return True
        except Exception as e:
            self.mark_test_status("FAIL", f"L·ªói ƒëi·ªÅu h∆∞·ªõng: {e}", level="Below Expectation")
            return False
        
    def print_invoice_test(self):
        """Test in h√≥a ƒë∆°n t·ª´ trang chi ti·∫øt ƒë∆°n h√†ng"""
        try:
            # B∆∞·ªõc 1: V√†o chi ti·∫øt ƒë∆°n h√†ng ƒë·∫ßu ti√™n
            details_button = self.wait.until(
                EC.element_to_be_clickable((
                    By.CSS_SELECTOR, "tbody.ant-table-tbody tr:first-child td:last-child a"
                ))
            )
            details_button.click()
            time.sleep(1)

            # B∆∞·ªõc 2: Click n√∫t "In h√≥a ƒë∆°n üßæ"
            print_button = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[.//span[contains(text(),'In h√≥a ƒë∆°n')]]"))
            )

            print_button.click()
            # G·ª≠i Enter v√†o c·ª≠a s·ªï tr√¨nh duy·ªát hi·ªán t·∫°i
           
            time.sleep(2)  # ƒë·ª£i c·ª≠a s·ªï hi·ªán l√™n
            keyboard.press_and_release('enter')

            # B∆∞·ªõc 4: ƒê·ª£i v√† ki·ªÉm tra toast hi·ªÉn th·ªã
            toast_success = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, "//div[contains(@class,'Toastify__toast--success') and contains(., 'T·∫£i xu·ªëng h√≥a ƒë∆°n th√†nh c√¥ng')]"))
            )

            if toast_success:
                self.mark_test_status("PASS", "Th√¥ng b√°o t·∫£i th√†nh c√¥ng hi·ªÉn th·ªã", level="Exemplary")
                return True
            else:
                self.mark_test_status("FAIL", "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o t·∫£i xu·ªëng th√†nh c√¥ng", level="Below Expectation")
                return False

        except Exception as e:
            self.mark_test_status("FAIL", f"L·ªói khi in h√≥a ƒë∆°n: {e}", level="Below Expectation")
            return False
    
    def wait_for_file(self, filename, timeout=10):
        """Ch·ªù file ƒë∆∞·ª£c t·∫£i v·ªÅ th√†nh c√¥ng"""
        file_path = os.path.join(DOWNLOAD_DIR, filename)
        waited = 0
        while not os.path.exists(file_path):
            time.sleep(1)
            waited += 1
            if waited > timeout:
                return None
        return file_path
    @log_test_execution
    def run_test(self):
        """Ch·∫°y test case ch√≠nh"""
        try:
            # Test Case: Thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ Pending sang In Delivery
            print("B·∫Øt ƒë·∫ßu test case: Thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ Pending sang In Delivery")
            print("-" * 50)
            
            # B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p
            if not self.login('huygiavu2003@gmail.com', '12345678'):
                return False
            
            # B∆∞·ªõc 2: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω ƒë∆°n h√†ng
            if not self.navigate_to_admin_orders():
                return False
            
            if not self.print_invoice_test():
                return False
            
            time.sleep(5)

            self.mark_test_status("PASS", f"L∆∞u h√≥a ƒë∆°n th√†nh c√¥ng", level="Sufficient")
            
            return True
        except Exception as e:
            self.mark_test_status("FAIL", f"L∆∞u h√≥a ƒë∆°n th·∫•t b·∫°i: {e}", level="Below Expectation")
            return False
        
    def mark_test_status(self, status, reason="", level=None):
        label = {
            "PASS": "[TEST PASSED]",
            "FAIL": "[TEST FAILED]",
            "BLOCKED": "[TEST BLOCKED]",
            "INCONCLUSIVE": "[TEST INCONCLUSIVE]"
        }
        level_label = f" (Level: {level})" if level else ""
        print(f"\n{label.get(status, '[UNKNOWN STATUS]')} - {reason}{level_label}\n")

    def cleanup(self):
        """D·ªçn d·∫πp v√† ƒë√≥ng browser"""
        if self.driver:
            self.driver.quit()
            print("ƒê√£ ƒë√≥ng browser")

# Ch·∫°y test
if __name__ == "__main__":
    #T·∫Øt log TensorFlow ·ªü m·ª©c m√¥i tr∆∞·ªùng
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
    test = ExportInvoiceTest()
    try:
        success = test.run_test()
        if success:
            print("\nTEST PASSED")
        else:
            print("\nTEST FAILED")
    finally:
        test.cleanup()
