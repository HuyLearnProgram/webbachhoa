import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager


class TC02_CartOpenTest:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--incognito")
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        self.actions = ActionChains(self.driver)
        self.driver.maximize_window()
        
        # Lưu trữ thông tin sản phẩm đã thêm để verification
        self.added_products = []
    
    def login(self, email, password):
        """Đăng nhập vào hệ thống"""
        try:
            # Bước 1: Điều hướng đến trang chủ
            self.driver.get('http://localhost:5173/')
            time.sleep(1)
            
            # Click vào liên kết đăng nhập
            login_link = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[@href='/login' and contains(text(), 'Đăng nhập hoặc đăng ký')]"))
            )
            login_link.click()
            time.sleep(2)
            
            # Nhập thông tin đăng nhập
            username_field = self.wait.until(EC.presence_of_element_located((By.NAME, "email")))
            password_field = self.driver.find_element(By.NAME, "password")
            
            username_field.clear()
            username_field.send_keys(email)
            password_field.clear()
            password_field.send_keys(password)
            time.sleep(2)
            
            # Click nút đăng nhập
            login_button = self.driver.find_element(By.XPATH, "//button[contains(@class, 'bg-main') and contains(text(), 'Đăng nhập')]")
            login_button.click()
            time.sleep(5)
            
            return True
        except Exception as e:
            return False
    
    def open_cart(self):
        """Mở giỏ hàng và chọn sản phẩm"""
        try:
            # Mở giỏ hàng
            # KHẮC PHỤC: Khai báo initial_url trước khi sử dụng
            initial_url = self.driver.current_url
            cart_page = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'cursor-pointer') and contains(., 'sản phẩm')]"))
            )
            cart_page.click()
            # Đợi URL thay đổi (tối đa 5 giây)
            WebDriverWait(self.driver, 5).until(
                lambda driver: driver.current_url != initial_url
            )
            
            # Lấy URL sau khi click
            current_url = self.driver.current_url
            print(f"✓ URL sau khi click: {current_url}")
            
            # Xác minh URL có chứa cart path
            if "http://localhost:5173/cart" in current_url:
                self.mark_test_status("PASS","Đã vào được trang giỏ hàng","Sufficient")    
                return True
            else:
                self.mark_test_status("FAIL","Không thể vào trang giỏ hàng","Below Expectation") 
                return False
        except Exception as e:
            self.mark_test_status("FAIL", f"Lỗi mở giỏ hàng và chọn sản phẩm: {e}", level="Below Expectation")
            return False

    def verify_products_in_cart(self):
        """Xác minh sản phẩm trong giỏ hàng khớp với sản phẩm đã thêm"""
        try:
            
            # Mở giỏ hàng
            cart_icon = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'cursor-pointer') and contains(., 'sản phẩm')]"))
            )
            cart_icon.click()
            time.sleep(3)
            
            # Tìm sản phẩm theo checkbox nhưng loại trừ "Chọn tất cả"
            cart_products = []
            
            try:
                # Tìm checkbox nhưng loại trừ checkbox "Chọn tất cả"
                checkboxes = self.driver.find_elements(By.XPATH, "//input[@type='checkbox']")
                
                valid_checkboxes = []
                for checkbox in checkboxes:
                    try:
                        # Lấy parent container để kiểm tra
                        parent = checkbox.find_element(By.XPATH, "./ancestor::div[1]")
                        parent_text = parent.text.strip().lower()
                        
                        # Loại trừ checkbox "Chọn tất cả"
                        if "chọn tất cả" not in parent_text and "select all" not in parent_text:
                            valid_checkboxes.append(checkbox)
                    except:
                        valid_checkboxes.append(checkbox)  # Giữ lại nếu không kiểm tra được
                
                
                # Lấy parent container của mỗi checkbox hợp lệ
                for i, checkbox in enumerate(valid_checkboxes):
                    try:
                        # Tìm container cha chứa toàn bộ thông tin sản phẩm
                        product_container = checkbox.find_element(By.XPATH, "./ancestor::div[contains(@class, 'grid') or contains(@class, 'flex')][1]")
                        cart_products.append(product_container)
                    except:
                        continue
                        
            except:
                self.mark_test_status("FAIL","Lỗi khi xác nhận sản phẩm trong giỏ hàng", "Below Expectation")

            
            if not cart_products:
                return self.simple_cart_verification()
            
            # Xác minh từng sản phẩm với improved extraction
            verified_products = []
            for i, cart_product in enumerate(cart_products):
                try:
                    product_info = self.extract_product_info_from_div_improved(cart_product, i)
                    if product_info and self.is_valid_product_info_improved(product_info):
                        verified_products.append(product_info)

                except Exception as e:
                    self.mark_test_status("FAIL","Lỗi khi xác nhận sản phẩm trong giỏ hàng", "Below Expectation")

            
            if not verified_products:
                return self.simple_cart_verification()
            
            return True
            
        except Exception as e:
            return self.simple_cart_verification()

    def extract_product_info_from_div_improved(self, cart_product, index):
        """Improved extraction với better parsing logic"""
        product_info = {'name': '', 'quantity': ''}
        
        try:
            # Lấy tất cả text từ container
            all_text = cart_product.text.strip()
            if not all_text:
                return None
            
            
            # Parse text để tìm tên sản phẩm và số lượng
            lines = [line.strip() for line in all_text.split('\n') if line.strip()]
            
            # Tìm tên sản phẩm - cải thiện logic
            product_name = ""
            for line in lines:
                # Tên sản phẩm: dòng dài, không chứa giá tiền, không phải UI elements
                if (len(line) > 15 and  # Tăng minimum length
                    not line.isdigit() and 
                    'đ' not in line and 
                    'Có sẵn:' not in line and
                    'chọn tất cả' not in line.lower() and
                    line not in ['-', '+'] and
                    not line.replace('.', '').replace(',', '').replace(' ', '').isdigit() and
                    not any(word in line.lower() for word in ['chọn', 'tất cả', 'select', 'all'])):
                    product_name = line
                    break
            
            # Tìm số lượng - ưu tiên input field
            quantity = "1"  # default
            try:
                # Tìm input number field trong container này
                quantity_input = cart_product.find_element(By.XPATH, ".//input[@type='number']")
                qty_value = quantity_input.get_attribute('value')
                if qty_value and qty_value.isdigit() and int(qty_value) > 0:
                    quantity = qty_value
            except:
                # Fallback: tìm trong text
                for line in lines:
                    if line.isdigit() and 1 <= int(line) <= 100:
                        quantity = line
                        break
            
            if product_name:  # Chỉ return nếu có tên sản phẩm hợp lệ
                product_info['name'] = product_name
                product_info['quantity'] = quantity
                return product_info
                
        except Exception as e:
            self.mark_test_status("FAIL","Lỗi khi trích xuất thông tin sản phẩm trong giỏ hàng", "Below Expectation")
        return None

    def is_valid_product_info_improved(self, product_info):
        """Improved validation với stricter rules"""
        if not product_info or not product_info.get('name'):
            return False
        
        name = product_info['name'].strip()
        
        # Loại bỏ các "sản phẩm" không hợp lệ
        invalid_patterns = [
            '-', '+', 'đ', '', 'chọn tất cả', 'select all'
        ]
        
        # Kiểm tra tên sản phẩm có hợp lệ không
        if name.lower() in [p.lower() for p in invalid_patterns] or len(name) < 10:
            return False
        
        # Kiểm tra không phải chỉ là số hoặc ký tự đặc biệt
        if name.isdigit() or all(c in '-+' for c in name):
            return False
        
        # Kiểm tra không chứa các từ khóa UI
        ui_keywords = ['chọn', 'tất cả', 'select', 'all', 'checkbox']
        if any(keyword in name.lower() for keyword in ui_keywords):
            return False
        
        return True

    def simple_cart_verification(self):
        """Improved simple verification"""
        try:
            
            expected_count = len(self.added_products)
            
            # Đếm checkbox sản phẩm (loại trừ "Chọn tất cả")
            try:
                all_checkboxes = self.driver.find_elements(By.XPATH, "//input[@type='checkbox']")
                product_checkboxes = []
                
                for checkbox in all_checkboxes:
                    try:
                        parent = checkbox.find_element(By.XPATH, "./ancestor::div[1]")
                        parent_text = parent.text.strip().lower()
                        
                        if "chọn tất cả" not in parent_text:
                            product_checkboxes.append(checkbox)
                    except:
                        product_checkboxes.append(checkbox)
                
                checkbox_count = len(product_checkboxes)
                
                if checkbox_count >= expected_count:
                    return True
            except:
                self.mark_test_status("FAIL","Lỗi khi xác nhận giỏ hàng", "Below Expectation")
            
            return False
            
        except Exception as e:
            return False

    
    def run_tc03_test(self):
        """Chạy test case TC01 hoàn chỉnh với status marking chuẩn"""
        try:
            print("=== BẮT ĐẦU TEST CASE TC02: MỞ TRANG GIỎ HÀNG ===")
            
            # Điều kiện tiên quyết: Đăng nhập
            if not self.login('huygiavu2003@gmail.com', '12345678'):
                self.mark_test_status("BLOCKED", "Không thể đăng nhập vào hệ thống", "Critical")
                return False
            
            if not self.open_cart():
                return False         
            
            if not self.verify_products_in_cart():
                self.mark_test_status("INCLUSIVE","Kiểm tra thông tin trong giỏ hàng không thành công","Medium")   
                return False       
            
            self.mark_test_status("PASS","Đã kiểm tra được thông tin trong giỏ","Sufficient")    
            
            return True        
        except Exception as e:
            self.mark_test_status("BLOCKED", f"Lỗi nghiêm trọng trong quá trình thực thi test: {str(e)}", "Critical")
            return False

    
    def cleanup(self):
        """Dọn dẹp và đóng browser"""
        if self.driver:
            self.driver.quit()
            print("✓ Đã đóng browser")
    
    def mark_test_status(self, status, reason="", level=None):
        label = {
            "PASS": "[TEST PASSED]",
            "FAIL": "[TEST FAILED]",
            "BLOCKED": "[TEST BLOCKED]",
            "INCONCLUSIVE": "[TEST INCONCLUSIVE]"
        }
        level_label = f" (Level: {level})" if level else ""
        print(f"\n{label.get(status, '[UNKNOWN STATUS]')} - {reason}{level_label}\n")

# Chạy test
if __name__ == "__main__":
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    test = TC02_CartOpenTest()
    try:
        success = test.run_tc03_test()
        if success:
            print("\n🎯 KẾT QUẢ: TEST PASSED")
        else:
            print("\n💥 KẾT QUẢ: TEST FAILED")
    finally:
        test.cleanup()
